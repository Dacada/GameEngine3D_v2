#ifndef ENGINE3D_INPUT_H
#define ENGINE3D_INPUT_H

#include "engine3D_vector.h"

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <GL/gl.h>

#include <stdbool.h>

typedef enum engine3D_input_cursorMode {
	ENGINE3D_CURSOR_ENABLED,  // Normal
	ENGINE3D_CURSOR_HIDDEN,   // Invisible but usable
	ENGINE3D_CURSOR_DISABLED, // Invisible and limitless movement (camera control mode)
} engine3D_input_cursorMode;

// Useful so you don't have to use directly GLFW constants.
typedef enum engine3D_input_keyCode {
	ENGINE3D_KEY_SPACE = GLFW_KEY_SPACE,
	ENGINE3D_KEY_APOSTROPHE = GLFW_KEY_APOSTROPHE, /* ' */
	ENGINE3D_KEY_COMMA = GLFW_KEY_COMMA, /* , */
	ENGINE3D_KEY_MINUS = GLFW_KEY_MINUS, /* - */
	ENGINE3D_KEY_PERIOD = GLFW_KEY_PERIOD, /* . */
	ENGINE3D_KEY_SLASH = GLFW_KEY_SLASH, /* / */
	ENGINE3D_KEY_0 = GLFW_KEY_0,
	ENGINE3D_KEY_1 = GLFW_KEY_1,
	ENGINE3D_KEY_2 = GLFW_KEY_2,
	ENGINE3D_KEY_3 = GLFW_KEY_3,
	ENGINE3D_KEY_4 = GLFW_KEY_4,
	ENGINE3D_KEY_5 = GLFW_KEY_5,
	ENGINE3D_KEY_6 = GLFW_KEY_6,
	ENGINE3D_KEY_7 = GLFW_KEY_7,
	ENGINE3D_KEY_8 = GLFW_KEY_8,
	ENGINE3D_KEY_9 = GLFW_KEY_9,
	ENGINE3D_KEY_SEMICOLON = GLFW_KEY_SEMICOLON, /* ; */
	ENGINE3D_KEY_EQUAL = GLFW_KEY_EQUAL, /* = */
	ENGINE3D_KEY_A = GLFW_KEY_A,
	ENGINE3D_KEY_B = GLFW_KEY_B,
	ENGINE3D_KEY_C = GLFW_KEY_C,
	ENGINE3D_KEY_D = GLFW_KEY_D,
	ENGINE3D_KEY_E = GLFW_KEY_E,
	ENGINE3D_KEY_F = GLFW_KEY_F,
	ENGINE3D_KEY_G = GLFW_KEY_G,
	ENGINE3D_KEY_H = GLFW_KEY_H,
	ENGINE3D_KEY_I = GLFW_KEY_I,
	ENGINE3D_KEY_J = GLFW_KEY_J,
	ENGINE3D_KEY_K = GLFW_KEY_K,
	ENGINE3D_KEY_L = GLFW_KEY_L,
	ENGINE3D_KEY_M = GLFW_KEY_M,
	ENGINE3D_KEY_N = GLFW_KEY_N,
	ENGINE3D_KEY_O = GLFW_KEY_O,
	ENGINE3D_KEY_P = GLFW_KEY_P,
	ENGINE3D_KEY_Q = GLFW_KEY_Q,
	ENGINE3D_KEY_R = GLFW_KEY_R,
	ENGINE3D_KEY_S = GLFW_KEY_S,
	ENGINE3D_KEY_T = GLFW_KEY_T,
	ENGINE3D_KEY_U = GLFW_KEY_U,
	ENGINE3D_KEY_V = GLFW_KEY_V,
	ENGINE3D_KEY_W = GLFW_KEY_W,
	ENGINE3D_KEY_X = GLFW_KEY_X,
	ENGINE3D_KEY_Y = GLFW_KEY_Y,
	ENGINE3D_KEY_Z = GLFW_KEY_Z,
	ENGINE3D_KEY_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET, /* [ */
	ENGINE3D_KEY_BACKSLASH = GLFW_KEY_BACKSLASH, /* \ */
	ENGINE3D_KEY_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET, /* ] */
	ENGINE3D_KEY_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT, /* ` */
	ENGINE3D_KEY_WORLD_1 = GLFW_KEY_WORLD_1, /* non-US #1 */
	ENGINE3D_KEY_WORLD_2 = GLFW_KEY_WORLD_2, /* non-US #2 */
	ENGINE3D_KEY_ESCAPE = GLFW_KEY_ESCAPE,
	ENGINE3D_KEY_ENTER = GLFW_KEY_ENTER,
	ENGINE3D_KEY_TAB = GLFW_KEY_TAB,
	ENGINE3D_KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
	ENGINE3D_KEY_INSERT = GLFW_KEY_INSERT,
	ENGINE3D_KEY_DELETE = GLFW_KEY_DELETE,
	ENGINE3D_KEY_RIGHT = GLFW_KEY_RIGHT,
	ENGINE3D_KEY_LEFT = GLFW_KEY_LEFT,
	ENGINE3D_KEY_DOWN = GLFW_KEY_DOWN,
	ENGINE3D_KEY_UP = GLFW_KEY_UP,
	ENGINE3D_KEY_PAGE_UP = GLFW_KEY_PAGE_UP,
	ENGINE3D_KEY_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
	ENGINE3D_KEY_HOME = GLFW_KEY_HOME,
	ENGINE3D_KEY_END = GLFW_KEY_END,
	ENGINE3D_KEY_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
	ENGINE3D_KEY_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
	ENGINE3D_KEY_NUM_LOCK = GLFW_KEY_NUM_LOCK,
	ENGINE3D_KEY_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
	ENGINE3D_KEY_KEY_PAUSE = GLFW_KEY_PAUSE,
	ENGINE3D_KEY_F1 = GLFW_KEY_F1,
	ENGINE3D_KEY_F2 = GLFW_KEY_F2,
	ENGINE3D_KEY_F3 = GLFW_KEY_F3,
	ENGINE3D_KEY_F4 = GLFW_KEY_F4,
	ENGINE3D_KEY_F5 = GLFW_KEY_F5,
	ENGINE3D_KEY_F6 = GLFW_KEY_F6,
	ENGINE3D_KEY_F7 = GLFW_KEY_F7,
	ENGINE3D_KEY_F8 = GLFW_KEY_F8,
	ENGINE3D_KEY_F9 = GLFW_KEY_F9,
	ENGINE3D_KEY_F10 = GLFW_KEY_F10,
	ENGINE3D_KEY_F11 = GLFW_KEY_F11,
	ENGINE3D_KEY_F12 = GLFW_KEY_F12,
	ENGINE3D_KEY_F13 = GLFW_KEY_F13,
	ENGINE3D_KEY_F14 = GLFW_KEY_F14,
	ENGINE3D_KEY_F15 = GLFW_KEY_F15,
	ENGINE3D_KEY_F16 = GLFW_KEY_F16,
	ENGINE3D_KEY_F17 = GLFW_KEY_F17,
	ENGINE3D_KEY_F18 = GLFW_KEY_F18,
	ENGINE3D_KEY_F19 = GLFW_KEY_F19,
	ENGINE3D_KEY_F20 = GLFW_KEY_F20,
	ENGINE3D_KEY_F21 = GLFW_KEY_F21,
	ENGINE3D_KEY_F22 = GLFW_KEY_F22,
	ENGINE3D_KEY_F23 = GLFW_KEY_F23,
	ENGINE3D_KEY_F24 = GLFW_KEY_F24,
	ENGINE3D_KEY_F25 = GLFW_KEY_F25,
	ENGINE3D_KEY_KP_0 = GLFW_KEY_KP_0,
	ENGINE3D_KEY_KP_1 = GLFW_KEY_KP_1,
	ENGINE3D_KEY_KP_2 = GLFW_KEY_KP_2,
	ENGINE3D_KEY_KP_3 = GLFW_KEY_KP_3,
	ENGINE3D_KEY_KP_4 = GLFW_KEY_KP_4,
	ENGINE3D_KEY_KP_5 = GLFW_KEY_KP_5,
	ENGINE3D_KEY_KP_6 = GLFW_KEY_KP_6,
	ENGINE3D_KEY_KP_7 = GLFW_KEY_KP_7,
	ENGINE3D_KEY_KP_8 = GLFW_KEY_KP_8,
	ENGINE3D_KEY_KP_9 = GLFW_KEY_KP_9,
	ENGINE3D_KEY_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
	ENGINE3D_KEY_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
	ENGINE3D_KEY_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
	ENGINE3D_KEY_KP_SUBSTRACT = GLFW_KEY_KP_SUBTRACT,
	ENGINE3D_KEY_KP_ADD = GLFW_KEY_KP_ADD,
	ENGINE3D_KEY_KP_ENTER = GLFW_KEY_KP_ENTER,
	ENGINE3D_KEY_KP_EQUAL = GLFW_KEY_KP_EQUAL,
	ENGINE3D_KEY_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
	ENGINE3D_KEY_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
	ENGINE3D_KEY_LEFT_ALT = GLFW_KEY_LEFT_ALT,
	ENGINE3D_KEY_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
	ENGINE3D_KEY_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
	ENGINE3D_KEY_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
	ENGINE3D_KEY_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
	ENGINE3D_KEY_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
	ENGINE3D_KEY_MENU = GLFW_KEY_MENU
} engine3D_input_keyCode;

typedef enum engine3D_input_mouseButton {
	ENGINE3D_MOUSE_BUTTON_1 = GLFW_MOUSE_BUTTON_1,
	ENGINE3D_MOUSE_BUTTON_2 = GLFW_MOUSE_BUTTON_2,
	ENGINE3D_MOUSE_BUTTON_3 = GLFW_MOUSE_BUTTON_3,
	ENGINE3D_MOUSE_BUTTON_4 = GLFW_MOUSE_BUTTON_4,
	ENGINE3D_MOUSE_BUTTON_5 = GLFW_MOUSE_BUTTON_5,
	ENGINE3D_MOUSE_BUTTON_6 = GLFW_MOUSE_BUTTON_6,
	ENGINE3D_MOUSE_BUTTON_7 = GLFW_MOUSE_BUTTON_7,
	ENGINE3D_MOUSE_BUTTON_8 = GLFW_MOUSE_BUTTON_8
} engine3D_input_mouseButton;
#define ENGINE3D_MOUSE_BUTTON_LEFT (ENGINE3D_MOUSE_BUTTON_1)
#define ENGINE3D_MOUSE_BUTTON_RIGHT (ENGINE3D_MOUSE_BUTTON_2)
#define ENGINE3D_MOUSE_BUTTON_MIDDLE (ENGINE3D_MOUSE_BUTTON_3)

extern GLFWwindow *engine3D_input_window;

void engine3D_input_update(void);

bool engine3D_input_getKey(const engine3D_input_keyCode keyCode);

bool engine3D_input_getKeyDown(const engine3D_input_keyCode keyCode);

bool engine3D_input_getKeyUp(const engine3D_input_keyCode keyCode);

bool engine3D_input_getMouse(const engine3D_input_mouseButton mouseButton);

bool engine3D_input_getMouseDown(const engine3D_input_mouseButton mouseButton);

bool engine3D_input_getMouseUp(const engine3D_input_mouseButton mouseButton);

void engine3D_input_getMousePosition(engine3D_vector2f_t *const position);

void engine3D_input_setMousePosition(const engine3D_vector2f_t *const position);

void engine3D_input_setCursor(const engine3D_input_cursorMode mode);

void _engine3D_input_keyCallback(const GLFWwindow *const window, const int key, const int scancode, const int action, const int mods);

void _engine3D_input_mouseButtonCallback(const GLFWwindow *const window, const int button, const int action, const int mods);

#endif /* ENGINE3D_INPUT_H */
